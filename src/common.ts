/* tslint:disable */
/* eslint-disable */
/**
 * SamCart Public API
 *  # Introduction Welcome to SamCart\'s Public API. This API is used for accessing the data inside your SamCart marketplace. ## Private Beta This API is currently in private beta. If you would like to be considered for our beta program, please contact support@samcart.com. ## OpenAPI Specification This API is documented in OpenAPI format and follows the practices of that specification. # Authentication This API offers one form of authentication: <ul> <li>API Key</lil> </ul>  API keys can only be generated by the SamCart Support team. Please contact support@samcart.com if you would like to be included in the Beta program.  ## Using the API Key To be successfully authenticated, you must pass the header parameter <span class=\'code\'>sc-api</span> with your provided API key. If your key is invalid or not supplied in the call, the API will return code <span class=\'code\'>401 Unauthorized</a> with an additional message explaining the specifics of why that code was returned. ## Security Scheme All of our responses are secure via HTTPS.  This API will accept HTTPS or HTTP requests, but HTTP requests will result in a `301 Moved Permanently` response header to redirect the request to HTTPS. If you send an HTTP request, and your client supports automatic redirects, you will receive your payload back via HTTPS. If your client does not support automatic redirects, you will receive the response `301 Moved Permanently` and you will have to manually update your request to use HTTPS.  # Rate Limiting All endpoints of this API are rate-limited. If any of the limits configured is reached, the service will return status code <span class=\'code\'>429 Too Many Requests</span> to the client. If a request is rate-limited, the response will include a header explaining the limits and how many seconds are remaining before additional requests can be made. # Pagination The following bulk endpoints include pagination: <ul class=\'list\'> <li><a href=\'https://developer.samcart.com/#operation/getCharges\'>Charges</a></li> <li><a href=\'https://developer.samcart.com/#operation/getCustomers\'>Customers</a></li> <li><a href=\'https://developer.samcart.com/#operation/getProducts\'>Products</a></li> </ul>  When making a request to a paginated endpoint, the response will return a maximum of 100 results but can be adjusted using the <span class=\'code\'>limit</span> query parameter. Included in the body of the response are links to subsequent pages of results. Using these links you are able to use to iterate through the various pages of results. # Response Codes The following is a list of the response code that may be sent after an API request is made. Some response codes will provide additional messaging about why that response code was returned: <ul class=\'list\'> <li class=\'code\'>200 Success</li> <li class=\'code\'>301 Moved Permanently</li> <li class=\'code\'>404 Object could not be found</splian> <li class=\'code\'>401 Unauthorized</li> <li class=\'code\'>429 Too Many Requests</li> <li class=\'code\'>504 Timeout</li> </ul>  # Versioning and compatibility We will try to maintain backward and future compatibility as much as we can. However, in case we need to introduce a backward-incompatible change, we will release a new version of the API. Currently, the API is on <span class=\'code\'>Version 1</span>. ## Changelog ### 2021-07-15 Fixed pagination URL protocol to match original request. ### 2021-07-13 Added bulk endpoint for our Subscriptions object. Calls made to this endpoint will return all Subscriptions within the specified parameters. ### 2021-06-22 Added bulk endpoint for our Orders object. Calls made to this endpoint will return all Orders within the specified parameters. ### 2021-06-09 Introduced the <span class=\'code\'>SKU</span> property to the Orders, Subscriptions, and Products endpoint. Added indexes to improve performance. ### 2021-06-02 Initial API specification published and began private beta. # Feedback We’d love your feedback! We’re committed to growing our API product and want to ensure it meets your needs. Click on the link below to give us feedback on our API. While you’re there, check out the other great initiatives on our roadmap. <a href=\'https://feedback.samcart.com/c/85-public-api\'>SamCart Public API Feedback</a> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@samcart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from "./configuration";
import { RequiredError, RequestArgs } from "./base";
import { AxiosInstance, AxiosResponse } from 'axios';

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    for (const object of objects) {
        for (const key in object) {
            if (Array.isArray(object[key])) {
                searchParams.delete(key);
                for (const item of object[key]) {
                    searchParams.append(key, item);
                }
            } else {
                searchParams.set(key, object[key]);
            }
        }
    }
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}
